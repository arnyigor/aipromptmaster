package com.arny.aipromptmaster.presentation.ui.compose.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.arny.aipromptmaster.presentation.ui.compose.theme.AIPromptMasterTheme
import com.arny.aipromptmaster.presentation.ui.compose.theme.AppDimensions
import com.arny.aipromptmaster.presentation.ui.addprompt.EditPromptViewModel
import com.arny.aipromptmaster.presentation.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EditPromptScreen(
    navController: NavController,
    promptId: String?,
    viewModel: EditPromptViewModel = viewModel()
) {
    AIPromptMasterTheme {
        val context = LocalContext.current
        val uiState by viewModel.uiState.collectAsState()

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        var title by remember { mutableStateOf(TextFieldValue("")) }
        var content by remember { mutableStateOf(TextFieldValue("")) }
        var category by remember { mutableStateOf("") }

        LaunchedEffect(promptId) {
            if (promptId != null) {
                viewModel.loadPrompt(promptId)
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ uiState
        LaunchedEffect(uiState) {
            if (uiState is com.arny.aipromptmaster.presentation.ui.addprompt.EditPromptUiState.Content) {
                val content = uiState as com.arny.aipromptmaster.presentation.ui.addprompt.EditPromptUiState.Content
                title = TextFieldValue(content.prompt.title)
                content = TextFieldValue(content.prompt.content)
                category = content.prompt.category ?: ""
            }
        }

        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text(if (promptId == null) "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç" else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç") },
                    navigationIcon = {
                        IconButton(onClick = { navController.popBackStack() }) {
                            Icon(
                                painter = painterResource(id = R.drawable.outline_close_24),
                                contentDescription = "–ù–∞–∑–∞–¥"
                            )
                        }
                    },
                    actions = {
                        TextButton(
                            onClick = {
                                // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ ViewModel
                                navController.popBackStack()
                            }
                        ) {
                            Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                        }
                    }
                )
            }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(AppDimensions.margin_16),
                verticalArrangement = Arrangement.spacedBy(AppDimensions.margin_16)
            ) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–º–ø—Ç–∞
                OutlinedTextField(
                    value = title,
                    onValueChange = { title = it },
                    label = { Text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    textStyle = MaterialTheme.typography.titleMedium
                )

                // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–∞
                OutlinedTextField(
                    value = category,
                    onValueChange = { category = it },
                    label = { Text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    placeholder = { Text("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –î–∏–∑–∞–π–Ω, –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥...") }
                )

                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                Divider()

                // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
                Text(
                    text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞:",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = androidx.compose.ui.text.font.FontWeight.Bold
                )

                OutlinedTextField(
                    value = content,
                    onValueChange = { content = it },
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f),
                    placeholder = {
                        Text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∑–¥–µ—Å—å...")
                    },
                    textStyle = MaterialTheme.typography.bodyLarge
                )

                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(AppDimensions.margin_8)
                ) {
                    OutlinedButton(
                        onClick = { /* TODO: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */ },
                        modifier = Modifier.weight(1f)
                    ) {
                        Text("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
                    }

                    Button(
                        onClick = {
                            // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç
                            navController.popBackStack()
                        },
                        modifier = Modifier.weight(1f),
                        enabled = title.text.isNotBlank() && content.text.isNotBlank()
                    ) {
                        Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                    }
                }
            }
        }
    }
}

// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
@Composable
private fun CreatePromptHelper(
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceContainerHigh
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = AppDimensions.cardElevation)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(AppDimensions.margin_16),
            verticalArrangement = Arrangement.spacedBy(AppDimensions.margin_8)
        ) {
            Text(
                text = "üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = androidx.compose.ui.text.font.FontWeight.Bold
            )

            Text(
                text = "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
                style = MaterialTheme.typography.bodyMedium
            )

            Text(
                text = "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
                style = MaterialTheme.typography.bodyMedium
            )

            Text(
                text = "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è",
                style = MaterialTheme.typography.bodyMedium
            )

            Text(
                text = "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                style = MaterialTheme.typography.bodyMedium
            )
        }
    }
}