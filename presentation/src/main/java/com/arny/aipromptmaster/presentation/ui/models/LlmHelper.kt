package com.arny.aipromptmaster.presentation.ui.models

import android.content.Context
import com.arny.aipromptmaster.domain.models.LlmModel
import com.arny.aipromptmaster.presentation.R
import java.math.BigDecimal
import java.math.RoundingMode
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

private const val llmIconsBaseUrl = "https://raw.githubusercontent.com/TypingMind/model-icons/main/icons"

// –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è TypingMind
private val iconMappings = mapOf(
    "gpt-4" to "gpt-4.webp",
    "gpt-3.5" to "gpt-35.webp",
    "gemini" to "gemini.png",
    "llama" to "llama.png",
    "mistral" to "mistralai.png",
    "claude" to "claude.webp",
    "azure-openai" to "azureopenai.png",
    "bing" to "bing.svg",
    "pi" to "pi-logo-192.png",
    "perplexity" to "perplexityai.png",
    "openrouterai" to "openrouterai.png",
    "llava" to "llava.png",
    "gpt4all" to "gpt4all.png",
    "vicuna" to "vicuna.png",
    "falcon" to "falcon.png",
    "huggingface" to "huggingface.png",
    "openai" to "openai.svg",
    "open-assistant" to "openassistant.webp",
    "replit" to "replit.png",
    "phi-2" to "phi-2.png",
    "gemma" to "gemma.jpg",
    "qwen2" to "qwen2.png",
    "deepseek" to "deepseek.png",
    "aya" to "aya.svg",
    "orca-mini" to "orca-mini.png"
)

// –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏–∫–æ–Ω–∫–∏
private val modelToIconMap = mapOf(
    // GPT-4 –º–æ–¥–µ–ª–∏
    "gpt-4" to "gpt-4",
    "gpt-4-turbo" to "gpt-4",
    "gpt-4-32k" to "gpt-4",
    "gpt-4-1106-preview" to "gpt-4",
    "gpt-4-0125-preview" to "gpt-4",
    "gpt-4-vision-preview" to "gpt-4",
    "gpt-4-turbo-preview" to "gpt-4",

    // GPT-3.5 –º–æ–¥–µ–ª–∏
    "gpt-3.5-turbo" to "gpt-3.5",
    "gpt-3.5-turbo-16k" to "gpt-3.5",
    "gpt-3.5-turbo-1106" to "gpt-3.5",
    "gpt-3.5-turbo-0125" to "gpt-3.5",

    // Gemini –º–æ–¥–µ–ª–∏
    "gemini-1.5-pro-latest" to "gemini",
    "gemini-ultra" to "gemini",
    "gemini-pro" to "gemini",
    "gemini-pro-vision" to "gemini",

    // LLaMA –º–æ–¥–µ–ª–∏
    "codellama-70b-instruct" to "llama",
    "codellama-34b-instruct" to "llama",
    "llama-3-8b-instruct:extended" to "llama",
    "llama-3-70b-instruct:nitro" to "llama",

    // Mistral –º–æ–¥–µ–ª–∏
    "mixtral-8x22b" to "mistral",
    "mistral-7b-instruct" to "mistral",
    "mistral-large" to "mistral",
    "mistral-tiny" to "mistral",
    "mistral-small" to "mistral",
    "mistral-medium" to "mistral",

    // Claude –º–æ–¥–µ–ª–∏
    "claude-3-opus-20240229" to "claude",
    "claude-3-sonnet-20240229" to "claude",
    "claude-3-haiku-20240307" to "claude",
    "claude-2.1" to "claude",
    "claude-2" to "claude",
    "claude-1" to "claude",
    "claude-instant-1" to "claude",
    "claude-instant-1.2" to "claude",

    // –î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏
    "replit-code-v1-3b" to "replit",
    "phi-2" to "phi-2",
    "Qwen2-72B-Instruct2" to "qwen2",
    "Qwen2-72B" to "qwen2",
    "Qwen2-7B-Instruct" to "qwen2",
    "DeepSeek-V2" to "deepseek",
    "DeepSeek-Coder-V2" to "deepseek",
    "deepseek-llm" to "deepseek",
    "deepseek-coder" to "deepseek",
    "aya-23-8B" to "aya",
    "aya-23-35B" to "aya",
    "orca-mini" to "orca-mini"
)

private val ONE_THOUSAND = BigDecimal(1000)
private val ONE_MILLION = BigDecimal(1_000_000)

fun LlmModel.formatDescription(context: Context): String {
    return buildString {
        // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        append(context.getString(R.string.created))
        append(" ")
        append(created.toReadableDate())

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç
        append("\n")
        append(context.getString(R.string.context))
        append(" ")
        append(contextLength.toCompactString())

        // –¶–µ–Ω—ã
        append("\n")
        append(formatPricingWithEmojis())
    }
}

private fun LlmModel.formatPricingWithEmojis(): String {
    return buildString {
        val promptPrice = (pricingPrompt * BigDecimal(1_000_000)).toCompactString()
        val completionPrice = (pricingCompletion * BigDecimal(1_000_000)).toCompactString()

        // üì• - –≤—Ö–æ–¥—è—â–∏–µ (–≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏)
        append("üì•$")
        append(promptPrice)
        append("/")

        // üì§ - –∏—Å—Ö–æ–¥—è—â–∏–µ (–æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏)
        append("üì§$")
        append(completionPrice)
        append("/1M")

        pricingImage?.let { imagePrice ->
            if (imagePrice > BigDecimal.ZERO) {
                append(" | üñºÔ∏è$")
                append(imagePrice.toCompactString())
            }
        }
    }
}


fun Long.toReadableDate(): String {
    val sdf = SimpleDateFormat("MMM dd, yyyy", Locale.getDefault())
    return sdf.format(Date(this*1000))
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç BigDecimal –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ 'K' (—Ç—ã—Å—è—á–∏) –∏–ª–∏ 'M' (–º–∏–ª–ª–∏–æ–Ω—ã).
 * - –ï—Å–ª–∏ —á–∏—Å–ª–æ >= 1,000,000, –æ–Ω–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 1,000,000, –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 'M'.
 * - –ï—Å–ª–∏ —á–∏—Å–ª–æ >= 1,000, –æ–Ω–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 1,000, –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 'K'.
 * - –ï—Å–ª–∏ —á–∏—Å–ª–æ < 1,000, –æ–Ω–æ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å,
 *   –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–æ–µ, –µ—Å–ª–∏ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–µ—Ç.
 *
 * @param scale –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.
 * @param roundingMode –†–µ–∂–∏–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é HALF_UP.
 * @return –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
fun BigDecimal.toCompactString(
    scale: Int = 2,
    roundingMode: RoundingMode = RoundingMode.HALF_UP
): String {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º when –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return when {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–∏–ª–ª–∏–æ–Ω–æ–º. compareTo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç >= 0, –µ—Å–ª–∏ this >= ONE_MILLION
        this >= ONE_MILLION -> {
            val result = this.divide(ONE_MILLION, scale, roundingMode)
            // toPlainString() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2E+1)
            "${result.toPlainString()}M"
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç—ã—Å—è—á–µ–π
        this >= ONE_THOUSAND -> {
            val result = this.divide(ONE_THOUSAND, scale, roundingMode)
            "${result.toPlainString()}K"
        }

        // –°–ª—É—á–∞–π –¥–ª—è —á–∏—Å–µ–ª –º–µ–Ω—å—à–µ 1000
        else -> {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª—ã–º.
            // stripTrailingZeros().scale() <= 0 - –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.
            if (this.stripTrailingZeros().scale() <= 0) {
                this.toBigInteger().toString() // –ï—Å–ª–∏ —Ü–µ–ª–æ–µ, –≤—ã–≤–æ–¥–∏–º –±–µ–∑ .00
            } else {
                this.setScale(scale, roundingMode)
                    .toPlainString() // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å, –æ–∫—Ä—É–≥–ª—è–µ–º
            }
        }
    }
}


private fun getModelIconUrl(modelId: String): String {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã OpenRouter
    val cleanModelId = cleanModelId(modelId)

    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –º–æ–¥–µ–ª–µ–π
    val iconId = modelToIconMap[cleanModelId] ?: findIconByPattern(cleanModelId)

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏
    val iconFileName = iconMappings[iconId] ?: "openai.svg"

    return "$llmIconsBaseUrl/$iconFileName"
}

private fun cleanModelId(modelId: String): String {
    // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã OpenRouter
    val withoutSuffix = modelId.split(":")[0]

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "openai/", "anthropic/")
    val parts = withoutSuffix.split("/")
    return if (parts.size > 1) parts[1] else withoutSuffix
}

private fun findIconByPattern(modelId: String): String {
    return when {
        modelId.startsWith("gpt-4") -> "gpt-4"
        modelId.startsWith("gpt-3.5") || modelId.startsWith("gpt-35") -> "gpt-3.5"
        modelId.startsWith("claude") -> "claude"
        modelId.startsWith("gemini") -> "gemini"
        modelId.startsWith("llama") || modelId.startsWith("codellama") -> "llama"
        modelId.startsWith("mistral") || modelId.startsWith("mixtral") -> "mistral"
        modelId.startsWith("deepseek") -> "deepseek"
        modelId.startsWith("qwen") -> "qwen2"
        modelId.startsWith("phi") -> "phi-2"
        modelId.startsWith("aya") -> "aya"
        modelId.startsWith("replit") -> "replit"
        modelId.startsWith("gemma") -> "gemma"
        modelId.startsWith("vicuna") -> "vicuna"
        modelId.startsWith("falcon") -> "falcon"
        modelId.startsWith("llava") -> "llava"
        modelId.startsWith("orca") -> "orca-mini"
        else -> "openai" // –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    }
}

fun getModelIconUrlWithFallback(modelId: String, defaultIconId: String = "openai"): String {
    return try {
        getModelIconUrl(modelId)
    } catch (e: Exception) {
        val fallbackFile = iconMappings[defaultIconId] ?: "openai.svg"
        "$llmIconsBaseUrl/$fallbackFile"
    }
}

