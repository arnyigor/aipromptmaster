package com.arny.aipromptmaster.domain.interactors

import com.arny.aipromptmaster.domain.R
import com.arny.aipromptmaster.domain.models.ApiMessage
import com.arny.aipromptmaster.domain.models.ApiRequestPayload
import com.arny.aipromptmaster.domain.models.ApiRequestWithFiles
import com.arny.aipromptmaster.domain.models.Chat
import com.arny.aipromptmaster.domain.models.ChatMessage
import com.arny.aipromptmaster.domain.models.ChatRole
import com.arny.aipromptmaster.domain.models.FileAttachment
import com.arny.aipromptmaster.domain.models.FileAttachmentMetadata
import com.arny.aipromptmaster.domain.models.FileReference
import com.arny.aipromptmaster.domain.models.LlmModel
import com.arny.aipromptmaster.domain.models.TokenEstimationResult
import com.arny.aipromptmaster.domain.models.errors.DomainError
import com.arny.aipromptmaster.domain.repositories.IChatHistoryRepository
import com.arny.aipromptmaster.domain.repositories.IFileRepository
import com.arny.aipromptmaster.domain.repositories.IOpenRouterRepository
import com.arny.aipromptmaster.domain.repositories.ISettingsRepository
import com.arny.aipromptmaster.domain.results.DataResult
import com.arny.aipromptmaster.domain.utils.FileUtils.formatFileSize
import com.arny.aipromptmaster.domain.utils.ITokenEstimator
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.onCompletion
import kotlinx.coroutines.flow.onStart
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import javax.inject.Inject

class LLMInteractor @Inject constructor(
    private val modelsRepository: IOpenRouterRepository,
    private val settingsRepository: ISettingsRepository,
    private val historyRepository: IChatHistoryRepository,
    private val fileRepository: IFileRepository,
    private val tokenEstimator: ITokenEstimator
) : ILLMInteractor {

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.
    // 20 —Å–æ–æ–±—â–µ–Ω–∏–π (10 –ø–∞—Ä "–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç") - —Ö–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç.
    // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä.
    private companion object {
        const val MAX_HISTORY_SIZE = 20
        const val FILE_PREVIEW_LENGTH = 500  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞
    }

    override suspend fun estimateTokensForCurrentChat(
        inputText: String,
        attachedFiles: List<FileAttachment>,
        conversationId: String?
    ): TokenEstimationResult {
        if (conversationId == null) {
            // –ï—Å–ª–∏ –Ω–µ—Ç ID —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ –∏ —Ñ–∞–π–ª—ã
            return tokenEstimator.estimateTokens(
                inputText = inputText,
                attachedFiles = attachedFiles,
                systemPrompt = null, //  –ü–æ–Ω—è—Ç—å –±—É–¥–µ—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                chatHistory = emptyList(),
            )
        }

        val systemPrompt = getSystemPrompt(conversationId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        val chatHistory = historyRepository.getHistoryFlow(conversationId).first() // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é

        return tokenEstimator.estimateTokens(
            inputText = inputText,
            attachedFiles = attachedFiles,
            systemPrompt = systemPrompt,
            chatHistory = chatHistory,
        )
    }

    override suspend fun createNewConversation(title: String): String {
        return historyRepository.createNewConversation(title)
    }

    override suspend fun setSystemPrompt(conversationId: String, prompt: String) {
        historyRepository.updateSystemPrompt(conversationId, prompt)
    }

    override suspend fun getSystemPrompt(conversationId: String): String? {
        val prompt = historyRepository.getSystemPrompt(conversationId)
        android.util.Log.d("LLMInteractor", "getSystemPrompt for $conversationId: $prompt")
        return prompt
    }

    override suspend fun setSystemPromptWithChatCreation(
        conversationId: String?,
        prompt: String,
        chatTitle: String
    ): String {
        val targetConversationId = conversationId ?: createNewConversation(chatTitle)
        setSystemPrompt(targetConversationId, prompt)
        return targetConversationId
    }

    override suspend fun deleteConversation(conversationId: String) {
        historyRepository.deleteConversation(conversationId)
    }

    override suspend fun toggleModelFavorite(modelId: String) {
        if (settingsRepository.isFavorite(modelId)) {
            settingsRepository.removeFromFavorites(modelId)
        } else {
            settingsRepository.addToFavorites(modelId)
        }
    }

    override fun cancelCurrentRequest() {
        modelsRepository.cancelCurrentRequest()
    }

    override fun getFavoriteModels(): Flow<List<LlmModel>> = getModels()
        .map { result ->
            when (result) {
                is DataResult.Success -> result.data.filter { it.isFavorite }
                else -> emptyList()
            }
        }

    override suspend fun getFullChatForExport(conversationId: String): String {
        val conversation = historyRepository.getConversation(conversationId)
            ?: throw DomainError.local(R.string.dialog_not_found) // –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π

        val history = historyRepository.getFullHistory(conversationId)

        val stringBuilder = StringBuilder()
        val dateFormat = SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault())

        // --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        stringBuilder.append("# –î–∏–∞–ª–æ–≥: ${conversation.title}\n\n")
        stringBuilder.append("**–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** ${dateFormat.format(Date())}\n\n")

        // --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–í–ê–ñ–ù–û: –≤ –Ω–∞—á–∞–ª–µ) ---
        if (!conversation.systemPrompt.isNullOrBlank()) {
            stringBuilder.append("## –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n")
            stringBuilder.append(conversation.systemPrompt)
            stringBuilder.append("\n\n")
        }

        // --- –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ---
        val attachedFiles = mutableListOf<FileAttachment>()
        val fileIds = mutableSetOf<String>()

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ fileId –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        history.forEach { message ->
            message.fileAttachment?.let { metadata ->
                if (!fileIds.contains(metadata.fileId)) {
                    fileRepository.getTemporaryFile(metadata.fileId)?.let { fullFile ->
                        attachedFiles.add(fullFile)
                        fileIds.add(metadata.fileId)
                    }
                }
            }
        }

        if (attachedFiles.isNotEmpty()) {
            stringBuilder.append("## –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
            attachedFiles.forEachIndexed { index, file ->
                stringBuilder.append("### –§–∞–π–ª ${index + 1}: ${file.fileName}\n\n")
                stringBuilder.append("- **–¢–∏–ø:** ${file.mimeType}\n")
                stringBuilder.append("- **–†–∞–∑–º–µ—Ä:** ${formatFileSize(file.fileSize)}\n")
                stringBuilder.append("- **–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:** ${file.fileExtension}\n\n")

                stringBuilder.append("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:**\n\n")
                stringBuilder.append("```${getFileExtensionForMarkdown(file.fileExtension)}\n")
                stringBuilder.append(file.originalContent)
                stringBuilder.append("\n```\n\n")
            }
        }

        // --- –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
        stringBuilder.append("## –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞\n\n")

        if (history.isEmpty()) {
            stringBuilder.append("*–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.*\n\n")
        } else {
            history.forEach { message ->
                val role = when (message.role) {
                    ChatRole.USER -> "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    ChatRole.ASSISTANT -> "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                    ChatRole.SYSTEM -> "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞"
                }

                stringBuilder.append("### $role\n\n")

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                val content = if (message.fileAttachment != null) {
                    // –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                    val lines = message.content.lines()
                    val filteredLines = lines.filter { line ->
                        !line.contains("üìé **–§–∞–π–ª**:") &&
                        !line.contains("**–†–∞–∑–º–µ—Ä**:") &&
                        !line.contains("**–ü—Ä–µ–≤—å—é**:") &&
                        !line.contains("–ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                    }
                    filteredLines.joinToString("\n").trim()
                } else {
                    message.content
                }

                if (content.isNotBlank()) {
                    stringBuilder.append("$content\n\n")
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                message.fileAttachment?.let { metadata ->
                    stringBuilder.append("*üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: ${metadata.fileName}*\n\n")
                }
            }
        }

        return stringBuilder.toString()
    }

    override suspend fun addUserMessageToHistory(conversationId: String, userMessage: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏–∞–ª–æ–≥, –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        val conversation = historyRepository.getConversation(conversationId)
        if (conversation == null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            val title = userMessage.take(50).ifEmpty { "–ù–æ–≤—ã–π —á–∞—Ç" }
            historyRepository.createNewConversation(title)
        }

        historyRepository.addMessages(
            conversationId,
            listOf(ChatMessage(role = ChatRole.USER, content = userMessage))
        )
    }

    override suspend fun addAssistantMessageToHistory(
        conversationId: String,
        assistantMessage: String
    ) {
        historyRepository.addMessages(
            conversationId,
            listOf(ChatMessage(role = ChatRole.ASSISTANT, content = assistantMessage))
        )
    }

    override suspend fun sendMessageWithFallback(
        model: String,
        conversationId: String?,
        estimatedTokens: Int // –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    ) {
        val currentConversationId = conversationId
            ?: throw DomainError.Local("Conversation ID is required")

        val assistantMessage = ChatMessage(role = ChatRole.ASSISTANT, content = "")
        val assistantMessageId =
            historyRepository.addMessage(currentConversationId, assistantMessage)

        try {
            val apiKey = settingsRepository.getApiKey()?.trim()
                ?: throw DomainError.Local("API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω.")

            // 1. –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            val systemPrompt = historyRepository.getSystemPrompt(currentConversationId)

            // 2. –°—Ç—Ä–æ–∏–º payload —Å —Ñ–∞–π–ª–∞–º–∏
            val payload = buildMessagesForApi(currentConversationId, systemPrompt)

            // 3. –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
            if (payload.attachedFiles.isNotEmpty()) {
                // –°–¢–†–ê–¢–ï–ì–ò–Ø –ê: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏
                runStreamingWithFiles(
                    model = model,
                    payload = payload,
                    apiKey = apiKey,
                    messageId = assistantMessageId
                )
            } else {
                // –°–¢–†–ê–¢–ï–ì–ò–Ø –ë: –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                runStreamingAttempt(
                    model = model,
                    messages = payload.messages,
                    apiKey = apiKey,
                    messageId = assistantMessageId,
                    estimatedTokens = estimatedTokens
                )
            }

        } catch (e: Exception) {
            historyRepository.deleteMessage(assistantMessageId)
            throw e
        }
    }

    /**
     * Streaming —Å —Ñ–∞–π–ª–∞–º–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π
     */
    private suspend fun runStreamingWithFiles(
        model: String,
        payload: ApiRequestPayload,
        apiKey: String,
        messageId: String
    ) {
        var receivedAnyData = false
        var streamError: DomainError? = null

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–∞–º–∏
        val requestWithFiles = ApiRequestWithFiles(
            model = model,
            messages = payload.messages,
            files = payload.attachedFiles.map { file ->
                FileReference(
                    id = file.id,
                    name = file.fileName,
                    content = file.originalContent,
                    mimeType = file.mimeType
                )
            }
        )

        modelsRepository.getChatCompletionStreamWithFiles(requestWithFiles, apiKey)
            .onCompletion { cause ->
                if (cause != null) {
                    streamError = when (cause) {
                        is DomainError -> cause
                        else -> DomainError.Generic(cause.localizedMessage ?: "Unknown flow error")
                    }
                    return@onCompletion
                }

                if (!receivedAnyData && streamError == null) {
                    streamError = DomainError.Generic("Stream completed without emitting any data.")
                }
            }
            .collect { result ->
                when (result) {
                    is DataResult.Success -> {
                        historyRepository.appendContentToMessage(messageId, result.data)
                        receivedAnyData = true
                    }

                    is DataResult.Error -> {
                        val exception = result.exception
                        streamError = when (exception) {
                            is DomainError -> exception
                            null -> DomainError.Generic("Stream returned an error with no exception details")
                            else -> DomainError.Generic(
                                exception.localizedMessage ?: "Unknown stream error"
                            )
                        }
                    }

                    DataResult.Loading -> { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º */
                    }
                }
            }

        streamError?.let { throw it }
    }

    override fun getChatList(): Flow<List<Chat>> {
        return historyRepository.getChatList()
    }

    override fun getChatHistoryFlow(conversationId: String?): Flow<List<ChatMessage>> =
        historyRepository.getHistoryFlow(conversationId.orEmpty())

    override suspend fun clearChat(conversationId: String?) {
        historyRepository.clearHistory(conversationId.orEmpty())
    }

    /**
     * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π, –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞.
     */
    override fun getModels(): Flow<DataResult<List<LlmModel>>> {
        val selectedIdFlow: Flow<String?> = settingsRepository.getSelectedModelId()
        val modelsListFlow: Flow<List<LlmModel>> = modelsRepository.getModelsFlow()
        val favoriteModelIds = settingsRepository.getFavoriteModelIds()
        return combine(
            selectedIdFlow,
            modelsListFlow,
            favoriteModelIds
        ) { selectedId, modelsList, favoriteModelIds ->
            if (modelsList.isEmpty()) {
                DataResult.Loading
            } else {
                val mappedList = modelsList.map { model ->
                    model.copy(
                        isSelected = model.id == selectedId,
                        isFavorite = model.id in favoriteModelIds
                    )
                }
                DataResult.Success(mappedList)
            }
        }.onStart { emit(DataResult.Loading) } // –ù–∞—á–∏–Ω–∞–µ–º —Å Loading –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
     */
    override fun getSelectedModel(): Flow<DataResult<LlmModel>> = getModels().map { dataResult ->
        when (dataResult) {
            is DataResult.Success -> {
                val selected = dataResult.data.find { it.isSelected }
                if (selected != null) {
                    DataResult.Success(selected)
                } else {
                    DataResult.Error(null, R.string.selected_model_not_found)
                }
            }

            is DataResult.Error -> DataResult.Error(dataResult.exception)
            is DataResult.Loading -> dataResult
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     */
    override suspend fun selectModel(id: String) {
        settingsRepository.setSelectedModelId(id)
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π.
     */
    override suspend fun refreshModels(): Result<Unit> = modelsRepository.refreshModels()

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫, —Ä–µ—à–∞—è, –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä.
     */
    override suspend fun toggleModelSelection(clickedModelId: String) {
        // 1. –ü–æ–ª—É—á–∞–µ–º –¢–ï–ö–£–©–ò–ô –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID.
        //    –ò—Å–ø–æ–ª—å–∑—É–µ–º `first()` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞.
        val currentlySelectedId = settingsRepository.getSelectedModelId().firstOrNull()

        // 2. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if (currentlySelectedId == clickedModelId) {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å -> –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
            settingsRepository.setSelectedModelId(null)
        } else {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å -> –≤—ã–±–∏—Ä–∞–µ–º –µ–µ
            settingsRepository.setSelectedModelId(clickedModelId)
        }
    }


    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    override suspend fun addUserMessageWithFile(
        conversationId: String,
        userMessage: String,
        fileAttachment: FileAttachment
    ) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏–∞–ª–æ–≥, –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        val conversation = historyRepository.getConversation(conversationId)
        if (conversation == null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            val title = "–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${fileAttachment.fileName.take(50)}"
            historyRepository.createNewConversation(title)
        }

        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        fileRepository.saveTemporaryFile(fileAttachment)

        // 3. –°–æ–∑–¥–∞–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        val metadata = FileAttachmentMetadata(
            fileId = fileAttachment.id,
            fileName = fileAttachment.fileName,
            fileExtension = fileAttachment.fileExtension,
            fileSize = fileAttachment.fileSize,
            mimeType = fileAttachment.mimeType,
            preview = truncateAtWordBoundary(fileAttachment.originalContent, FILE_PREVIEW_LENGTH)
        )

        // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        val displayMessage = buildString {
            if (userMessage.isNotBlank()) {
                append(userMessage)
                append("\n\n")
            }
            append("üìé **–§–∞–π–ª**: ${metadata.fileName}")
            append("\n**–†–∞–∑–º–µ—Ä**: ${formatFileSize(metadata.fileSize)}")
            append("\n\n**–ü—Ä–µ–≤—å—é**:\n```")
            if (fileAttachment.originalContent.length > FILE_PREVIEW_LENGTH) {
                append("...\n```\n*–ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞*")
            } else {
                append("\n```")
            }
        }

        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        val message = ChatMessage(
            role = ChatRole.USER,
            content = displayMessage,
            fileAttachment = metadata
        )

        historyRepository.addMessages(conversationId, listOf(message))
    }

    /**
     * ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —Å–ª–æ–≤–∞
     */
    private fun truncateAtWordBoundary(text: String, maxLength: Int): String {
        if (text.length <= maxLength) return text

        val truncated = text.take(maxLength)
        val lastSpace = truncated.lastIndexOf(' ')

        return if (lastSpace > maxLength * 0.8) {
            truncated.substring(0, lastSpace)
        } else {
            truncated
        }
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
     */
    private suspend fun buildMessagesForApi(
        conversationId: String,
        systemPrompt: String?
    ): ApiRequestPayload {
        val history = historyRepository.getHistoryFlow(conversationId)
            .first()
            .takeLast(MAX_HISTORY_SIZE)

        val messagesForApi = mutableListOf<ApiMessage>()
        val attachedFiles = mutableListOf<FileAttachment>()

        // 1. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –í–°–ï–ì–î–ê –ø–µ—Ä–≤—ã–º
        systemPrompt?.let {
            messagesForApi.add(ApiMessage(role = "system", content = it))
        }

        // 2. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        for (message in history) {
            if (message.fileAttachment != null) {
                val fullFile = fileRepository.getTemporaryFile(message.fileAttachment.fileId)
                if (fullFile != null && attachedFiles.none { it.id == fullFile.id }) {
                    attachedFiles.add(fullFile)
                }
            }
        }

        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        if (attachedFiles.isNotEmpty()) {
            val filesInstruction = buildString {
                append("üìã **Attached Files Context**\n\n")
                append("The user has attached ${attachedFiles.size} file(s) for analysis. ")
                append("Read and analyze the content below:\n\n")

                attachedFiles.forEachIndexed { index, file ->
                    append("--- FILE ${index + 1}: ${file.fileName} ---\n")
                    append("Type: ${file.mimeType}\n")
                    append("Size: ${formatFileSize(file.fileSize)}\n")
                    append("Content:\n${file.originalContent}\n")
                    append("--- END OF FILE ${index + 1} ---\n\n")
                }

                append("üîç **Instructions**: Carefully read all attached files and provide a comprehensive analysis based on the user's request.")
            }

            messagesForApi.add(ApiMessage(role = "system", content = filesInstruction))
        }

        // 4. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ë–ï–ó –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–æ–≤)
        for (message in history) {
            val messageContent = if (message.fileAttachment != null) {
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, —Ç.–∫. —Ñ–∞–π–ª —É–∂–µ –≤ system message
                message.content.substringBefore("**–ü—Ä–µ–≤—å—é**:").trim()
            } else {
                message.content
            }

            messagesForApi.add(
                ApiMessage(
                    role = message.role.toApiRole(),  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º toApiRole()
                    content = messageContent
                )
            )
        }

        return ApiRequestPayload(
            messages = messagesForApi,
            attachedFiles = attachedFiles
        )
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π
     */
    private suspend fun runStreamingAttempt(
        model: String,
        messages: List<ApiMessage>,
        apiKey: String,
        messageId: String,
        estimatedTokens: Int
    ) {
        var receivedAnyData = false
        var streamError: DomainError? = null

        val chatMessages = messages.map { apiMsg ->
            ChatMessage(
                role = ChatRole.fromApiRole(apiMsg.role),
                content = apiMsg.content
            )
        }

        modelsRepository.getChatCompletionStream(model, chatMessages, apiKey)
            .onCompletion { cause ->
                if (cause != null) {
                    streamError = when (cause) {
                        is DomainError -> cause
                        else -> DomainError.Generic(cause.localizedMessage ?: "Unknown flow error")
                    }
                    return@onCompletion
                }

                if (!receivedAnyData && streamError == null) {
                    streamError = DomainError.Generic("Stream completed without emitting any data.")
                }
            }
            .collect { result ->
                when (result) {
                    is DataResult.Success -> {
                        historyRepository.appendContentToMessage(messageId, result.data)
                        receivedAnyData = true
                    }

                    is DataResult.Error -> {
                        val exception = result.exception
                        streamError = when (exception) {
                            is DomainError -> exception
                            null -> DomainError.Generic("Stream returned an error with no exception details")
                            else -> DomainError.Generic(
                                exception.localizedMessage ?: "Unknown stream error"
                            )
                        }
                    }

                    DataResult.Loading -> { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º */
                    }
                }
            }

        streamError?.let { throw it }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è markdown –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
     */
    private fun getFileExtensionForMarkdown(extension: String): String {
        return when (extension.lowercase()) {
            "kt", "kotlin" -> "kotlin"
            "java" -> "java"
            "js", "javascript" -> "javascript"
            "ts", "typescript" -> "typescript"
            "py", "python" -> "python"
            "xml" -> "xml"
            "json" -> "json"
            "yaml", "yml" -> "yaml"
            "md", "markdown" -> "markdown"
            "html" -> "html"
            "css" -> "css"
            "scss", "sass" -> "scss"
            "less" -> "less"
            "php" -> "php"
            "rb", "ruby" -> "ruby"
            "go" -> "go"
            "rs", "rust" -> "rust"
            "cpp", "c++", "cxx", "cc" -> "cpp"
            "c" -> "c"
            "cs", "csharp" -> "csharp"
            "swift" -> "swift"
            "sh", "bash", "shell" -> "bash"
            "sql" -> "sql"
            "dockerfile" -> "dockerfile"
            "makefile", "mk" -> "makefile"
            "ini", "conf", "config" -> "ini"
            "properties", "prop" -> "properties"
            "toml" -> "toml"
            "gradle" -> "gradle"
            "kts" -> "kotlin"
            else -> "" // –ë–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        }
    }

}
