package com.arny.aipromptmaster.domain.interactors

import android.util.Log
import com.arny.aipromptmaster.domain.R
import com.arny.aipromptmaster.domain.models.ApiMessage
import com.arny.aipromptmaster.domain.models.ApiRequestPayload
import com.arny.aipromptmaster.domain.models.ApiRequestWithFiles
import com.arny.aipromptmaster.domain.models.Chat
import com.arny.aipromptmaster.domain.models.ChatMessage
import com.arny.aipromptmaster.domain.models.ChatRole
import com.arny.aipromptmaster.domain.models.FileAttachment
import com.arny.aipromptmaster.domain.models.FileAttachmentMetadata
import com.arny.aipromptmaster.domain.models.FileReference
import com.arny.aipromptmaster.domain.models.LlmModel
import com.arny.aipromptmaster.domain.models.StreamChunk
import com.arny.aipromptmaster.domain.models.TokenEstimationResult
import com.arny.aipromptmaster.domain.models.errors.DomainError
import com.arny.aipromptmaster.domain.repositories.IChatHistoryRepository
import com.arny.aipromptmaster.domain.repositories.IFileRepository
import com.arny.aipromptmaster.domain.repositories.IOpenRouterRepository
import com.arny.aipromptmaster.domain.repositories.ISettingsRepository
import com.arny.aipromptmaster.domain.results.DataResult
import com.arny.aipromptmaster.domain.utils.FileUtils.formatFileSize
import com.arny.aipromptmaster.domain.utils.ITokenEstimator
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.onCompletion
import kotlinx.coroutines.flow.onStart
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import javax.inject.Inject

class LLMInteractor @Inject constructor(
    private val modelsRepository: IOpenRouterRepository,
    private val settingsRepository: ISettingsRepository,
    private val historyRepository: IChatHistoryRepository,
    private val tokenEstimator: ITokenEstimator
) : ILLMInteractor {

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.
    // 20 —Å–æ–æ–±—â–µ–Ω–∏–π (10 –ø–∞—Ä "–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç") - —Ö–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç.
    // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä.
    private companion object {
        const val MAX_HISTORY_SIZE = 20
    }

    override suspend fun estimateTokensForCurrentChat(
        inputText: String,
        attachedFiles: List<FileAttachment>,
        conversationId: String?
    ): TokenEstimationResult {
        if (conversationId == null) {
            // –ï—Å–ª–∏ –Ω–µ—Ç ID —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ –∏ —Ñ–∞–π–ª—ã
            return tokenEstimator.estimateTokens(
                inputText = inputText,
                attachedFiles = attachedFiles,
                systemPrompt = null, //  –ü–æ–Ω—è—Ç—å –±—É–¥–µ—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                chatHistory = emptyList(),
            )
        }

        val systemPrompt = getSystemPrompt(conversationId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        val chatHistory = historyRepository.getHistoryFlow(conversationId).first() // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é

        return tokenEstimator.estimateTokens(
            inputText = inputText,
            attachedFiles = attachedFiles,
            systemPrompt = systemPrompt,
            chatHistory = chatHistory,
        )
    }

    override suspend fun createNewConversation(title: String): String {
        return historyRepository.createNewConversation(title)
    }

    override suspend fun setSystemPrompt(conversationId: String, prompt: String) {
        historyRepository.updateSystemPrompt(conversationId, prompt)
    }

    override suspend fun getSystemPrompt(conversationId: String): String? {
        val prompt = historyRepository.getSystemPrompt(conversationId)
        android.util.Log.d("LLMInteractor", "getSystemPrompt for $conversationId: $prompt")
        return prompt
    }

    override suspend fun setSystemPromptWithChatCreation(
        conversationId: String?,
        prompt: String,
        chatTitle: String
    ): String {
        val targetConversationId = conversationId ?: createNewConversation(chatTitle)
        setSystemPrompt(targetConversationId, prompt)
        return targetConversationId
    }

    override suspend fun deleteConversation(conversationId: String) {
        historyRepository.deleteConversation(conversationId)
    }

    override suspend fun toggleModelFavorite(modelId: String) {
        if (settingsRepository.isFavorite(modelId)) {
            settingsRepository.removeFromFavorites(modelId)
        } else {
            settingsRepository.addToFavorites(modelId)
        }
    }

    override fun cancelCurrentRequest() {
        modelsRepository.cancelCurrentRequest()
    }

    override fun getFavoriteModels(): Flow<List<LlmModel>> = getModels()
        .map { result ->
            when (result) {
                is DataResult.Success -> result.data.filter { it.isFavorite }
                else -> emptyList()
            }
        }

// LLMInteractor.kt - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

    override suspend fun getFullChatForExport(conversationId: String): String {
        val conversation = historyRepository.getConversation(conversationId)
            ?: throw DomainError.local(R.string.dialog_not_found)

        val history = historyRepository.getFullHistory(conversationId)
        val stringBuilder = StringBuilder()
        val dateFormat = SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault())

        // --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        stringBuilder.append("# –î–∏–∞–ª–æ–≥: ${conversation.title}\n\n")
        stringBuilder.append("**–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** ${dateFormat.format(Date())}\n\n")

        // --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
        if (!conversation.systemPrompt.isNullOrBlank()) {
            stringBuilder.append("## –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n")
            stringBuilder.append(conversation.systemPrompt)
            stringBuilder.append("\n\n")
        }

        // --- –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥) ---
        val attachedFiles = getConversationFiles(conversationId) // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        if (attachedFiles.isNotEmpty()) {
            stringBuilder.append("## –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
            attachedFiles.forEachIndexed { index, file ->
                stringBuilder.append("### –§–∞–π–ª ${index + 1}: ${file.fileName}\n\n")
                stringBuilder.append("- **–¢–∏–ø:** ${file.mimeType}\n")
                stringBuilder.append("- **–†–∞–∑–º–µ—Ä:** ${formatFileSize(file.fileSize)}\n")
                stringBuilder.append("- **–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:** ${file.fileExtension}\n\n")
                stringBuilder.append("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:**\n\n")
                stringBuilder.append("```")
                        stringBuilder.append(file.originalContent)
                        stringBuilder.append("\n```\n\n")
            }
        }

        // --- –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
        stringBuilder.append("## –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞\n\n")

        if (history.isEmpty()) {
            stringBuilder.append("*–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.*\n\n")
        } else {
            history.forEach { message ->
                val role = when (message.role) {
                    ChatRole.USER -> "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    ChatRole.ASSISTANT -> "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                    ChatRole.SYSTEM -> "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞"
                }

                stringBuilder.append("### $role\n\n")
                stringBuilder.append("${message.content}\n\n")
            }
        }

        return stringBuilder.toString()
    }


    override suspend fun addUserMessageToHistory(conversationId: String, userMessage: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏–∞–ª–æ–≥, –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        val conversation = historyRepository.getConversation(conversationId)
        if (conversation == null) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            val title = userMessage.take(50).ifEmpty { "–ù–æ–≤—ã–π —á–∞—Ç" }
            historyRepository.createNewConversation(title)
        }

        historyRepository.addMessages(
            conversationId,
            listOf(ChatMessage(role = ChatRole.USER, content = userMessage))
        )
    }

    override suspend fun addAssistantMessageToHistory(
        conversationId: String,
        assistantMessage: String
    ) {
        historyRepository.addMessages(
            conversationId,
            listOf(ChatMessage(role = ChatRole.ASSISTANT, content = assistantMessage))
        )
    }

    /**
     *  –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
     */
    override suspend fun regenerateLastResponse(
        model: String,
        conversationId: String
    ) {
        // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        val history = historyRepository.getHistoryFlow(conversationId).first()
        val lastMessage = history.lastOrNull()

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if (lastMessage?.role != ChatRole.ASSISTANT) {
            throw DomainError.Local("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        }

        // 3. –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        historyRepository.deleteMessage(lastMessage.id)

        // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è user message)
        sendMessage(model, conversationId, 0)
    }

    /**
     * –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –õ–Æ–ë–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
     */
    override suspend fun regenerateMessage(
        model: String,
        conversationId: String,
        messageId: String
    ) {
        val history = historyRepository.getHistoryFlow(conversationId).first()

        // 1. –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        val messageIndex = history.indexOfFirst { it.id == messageId }
        if (messageIndex == -1) {
            throw DomainError.Local("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        }

        val messageToRegenerate = history[messageIndex]

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if (messageToRegenerate.role != ChatRole.ASSISTANT) {
            throw DomainError.Local("–ú–æ–∂–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞") // –¢—É—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏–∫–æ–Ω–∫–∞ —Å—Ç–æ–∏—Ç —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º,–Ω–æ —Ä–µ–≥–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç
        }

        // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–û–°–õ–ï (–≤–∫–ª—é—á–∞—è —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        val messagesToDelete = history.subList(messageIndex, history.size)
        messagesToDelete.forEach { msg ->
            historyRepository.deleteMessage(msg.id)
        }

        // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
        sendMessage(model, conversationId, 0)
    }

    // –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–¢–û–î–û–í –î–õ–Ø –§–ê–ô–õ–û–í –ß–ê–¢–ê
    override suspend fun addFileToConversation(conversationId: String, file: FileAttachment) {
        historyRepository.addFileToConversation(conversationId, file)
    }

    override suspend fun removeFileFromConversation(conversationId: String, fileId: String) {
        historyRepository.removeFileFromConversation(conversationId, fileId)
    }

    override suspend fun getConversationFiles(conversationId: String): List<FileAttachment> {
        return historyRepository.getConversationFiles(conversationId)
    }

    override fun getConversationFilesFlow(conversationId: String): Flow<List<FileAttachment>> {
        return historyRepository.getConversationFilesFlow(conversationId)
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
     */
    override suspend fun createAssistantMessage(conversationId: String): String {
        val assistantMessage = ChatMessage(
            role = ChatRole.ASSISTANT,
            content = ""
        )
        return historyRepository.addMessage(conversationId, assistantMessage)
    }

    /**
     * Streaming —Å —Ñ–∞–π–ª–∞–º–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π
     */
    private suspend fun runStreamingWithFiles(
        model: String,
        payload: ApiRequestPayload,
        apiKey: String,
        messageId: String
    ) {
        var receivedAnyData = false
        var streamError: DomainError? = null
        val startTime = System.currentTimeMillis()

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
        historyRepository.updateMessageThinkingState(messageId, isThinking = true, thinkingTime = null)

        val requestWithFiles = ApiRequestWithFiles(
            model = model,
            messages = payload.messages,
            files = payload.attachedFiles.map { file ->
                FileReference(
                    id = file.id,
                    name = file.fileName,
                    content = file.originalContent,
                    mimeType = file.mimeType
                )
            }
        )

        modelsRepository.getChatCompletionStreamWithFiles(requestWithFiles, apiKey)
            .onCompletion { cause ->
                val thinkingTime = System.currentTimeMillis() - startTime

                if (cause != null) {
                    streamError = when (cause) {
                        is DomainError -> cause
                        else -> DomainError.Generic(cause.localizedMessage ?: "Unknown flow error")
                    }
                    historyRepository.updateMessageThinkingState(messageId, isThinking = false, thinkingTime = null)
                    return@onCompletion
                }

                if (!receivedAnyData && streamError == null) {
                    streamError = DomainError.Generic("Stream completed without emitting any data.")
                }

                historyRepository.updateMessageThinkingState(messageId, isThinking = false, thinkingTime = thinkingTime)
            }
            .collect { result ->
                when (result) {
                    is DataResult.Success -> {
                        historyRepository.appendContentToMessage(messageId, result.data)
                        receivedAnyData = true
                    }
                    is DataResult.Error -> {
                        val exception = result.exception
                        streamError = when (exception) {
                            is DomainError -> exception
                            null -> DomainError.Generic("Stream returned an error with no exception details")
                            else -> DomainError.Generic(
                                exception.localizedMessage ?: "Unknown stream error"
                            )
                        }
                    }
                    DataResult.Loading -> { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º */ }
                }
            }

        streamError?.let { throw it }
    }

    override fun getChatList(): Flow<List<Chat>> {
        return historyRepository.getChatList()
    }

    override fun getChatHistoryFlow(conversationId: String?): Flow<List<ChatMessage>> =
        historyRepository.getHistoryFlow(conversationId.orEmpty())

    override suspend fun clearChat(conversationId: String?) {
        historyRepository.clearHistory(conversationId.orEmpty())
    }

    /**
     * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π, –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞.
     */
    override fun getModels(): Flow<DataResult<List<LlmModel>>> {
        val selectedIdFlow: Flow<String?> = settingsRepository.getSelectedModelId()
        val modelsListFlow: Flow<List<LlmModel>> = modelsRepository.getModelsFlow()
        val favoriteModelIds = settingsRepository.getFavoriteModelIds()
        return combine(
            selectedIdFlow,
            modelsListFlow,
            favoriteModelIds
        ) { selectedId, modelsList, favoriteModelIds ->
            if (modelsList.isEmpty()) {
                DataResult.Loading
            } else {
                val mappedList = modelsList.map { model ->
                    model.copy(
                        isSelected = model.id == selectedId,
                        isFavorite = model.id in favoriteModelIds
                    )
                }
                DataResult.Success(mappedList)
            }
        }.onStart { emit(DataResult.Loading) } // –ù–∞—á–∏–Ω–∞–µ–º —Å Loading –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
     */
    override fun getSelectedModel(): Flow<DataResult<LlmModel>> = getModels().map { dataResult ->
        when (dataResult) {
            is DataResult.Success -> {
                val selected = dataResult.data.find { it.isSelected }
                if (selected != null) {
                    DataResult.Success(selected)
                } else {
                    DataResult.Error(null, R.string.selected_model_not_found)
                }
            }

            is DataResult.Error -> DataResult.Error(dataResult.exception)
            is DataResult.Loading -> dataResult
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     */
    override suspend fun selectModel(id: String) {
        settingsRepository.setSelectedModelId(id)
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π.
     */
    override suspend fun refreshModels(): Result<Unit> = modelsRepository.refreshModels()

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫, —Ä–µ—à–∞—è, –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä.
     */
    override suspend fun toggleModelSelection(clickedModelId: String) {
        // 1. –ü–æ–ª—É—á–∞–µ–º –¢–ï–ö–£–©–ò–ô –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID.
        //    –ò—Å–ø–æ–ª—å–∑—É–µ–º `first()` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞.
        val currentlySelectedId = settingsRepository.getSelectedModelId().firstOrNull()

        // 2. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if (currentlySelectedId == clickedModelId) {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å -> –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
            settingsRepository.setSelectedModelId(null)
        } else {
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å -> –≤—ã–±–∏—Ä–∞–µ–º –µ–µ
            settingsRepository.setSelectedModelId(clickedModelId)
        }
    }

    /**
     * –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    override suspend fun sendMessage(
        model: String,
        conversationId: String,
        estimatedTokens: Int
    ) {
        val apiKey = settingsRepository.getApiKey()?.trim()
            ?: throw DomainError.Local("API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω")

        // 1. –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        val assistantMessageId = createAssistantMessage(conversationId)

        try {
            // 2. –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            val systemPrompt = historyRepository.getSystemPrompt(conversationId)

            // 3. –°—Ç—Ä–æ–∏–º payload (—Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —á–∞—Ç–∞)
            val payload = buildMessagesForApi(conversationId, systemPrompt)

            // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if (payload.attachedFiles.isNotEmpty()) {
                runStreamingWithFiles(
                    model = model,
                    payload = payload,
                    apiKey = apiKey,
                    messageId = assistantMessageId
                )
            } else {
                runStreamingAttempt(
                    model = model,
                    messages = payload.messages,
                    apiKey = apiKey,
                    messageId = assistantMessageId,
                    estimatedTokens = estimatedTokens
                )
            }
        } catch (e: Exception) {
            historyRepository.deleteMessage(assistantMessageId)
            throw e
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
     * –§–∞–π–ª—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –ß–ê–¢–ê, –∞ –Ω–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private suspend fun buildMessagesForApi(
        conversationId: String,
        systemPrompt: String?
    ): ApiRequestPayload {
        // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ë–ï–ó —Ñ–∞–π–ª–æ–≤)
        val history = historyRepository.getHistoryFlow(conversationId)
            .first()
            .takeLast(MAX_HISTORY_SIZE)

        val messagesForApi = mutableListOf<ApiMessage>()

        // 2. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –í–°–ï–ì–î–ê –ø–µ—Ä–≤—ã–º
        systemPrompt?.let {
            messagesForApi.add(ApiMessage(role = "system", content = it))
        }

        // 3. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –ß–ê–¢–ê (–ù–ï –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π!)
        val attachedFiles = historyRepository.getConversationFiles(conversationId)

        // 4. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º system message —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        if (attachedFiles.isNotEmpty()) {
            val filesInstruction = buildString {
                append("üìã **Context Files**\n\n")
                append("The user has ${attachedFiles.size} file(s) available for reference:\n\n")

                attachedFiles.forEachIndexed { index, file ->
                    append("--- FILE ${index + 1}: ${file.fileName} ---\n")
                    append("Type: ${file.mimeType}\n")
                    append("Size: ${formatFileSize(file.fileSize)}\n")
                    append("Content:\n${file.originalContent}\n")
                    append("--- END OF FILE ${index + 1} ---\n\n")
                }

                append("Use these files to answer user questions.\n")
            }

            messagesForApi.add(ApiMessage(role = "system", content = filesInstruction))
        }

        // 5. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∏—Å—Ç—ã–µ, –ë–ï–ó —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤)
        for (message in history) {
            messagesForApi.add(
                ApiMessage(
                    role = message.role.toApiRole(),
                    content = message.content
                )
            )
        }

        return ApiRequestPayload(
            messages = messagesForApi,
            attachedFiles = attachedFiles
        )
    }

    private suspend fun runStreamingAttempt(
        model: String,
        messages: List<ApiMessage>,
        apiKey: String,
        messageId: String,
        estimatedTokens: Int
    ) {
        var receivedAnyData = false
        var streamError: DomainError? = null
        var actualPromptTokens: Int? = null
        val startTime = System.currentTimeMillis()

        // –í–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¥—É–º–∞–µ—Ç"
        historyRepository.updateMessageThinkingState(messageId, isThinking = true, thinkingTime = null)

        try {
            val chatMessages = messages.map { apiMsg ->
                ChatMessage(
                    role = ChatRole.fromApiRole(apiMsg.role),
                    content = apiMsg.content
                )
            }

            modelsRepository.getChatCompletionStream(model, chatMessages, apiKey)
                .onCompletion { cause ->
                    val thinkingTime = System.currentTimeMillis() - startTime

                    if (cause != null) {
                        streamError = when (cause) {
                            is DomainError -> cause
                            else -> DomainError.Generic(cause.localizedMessage ?: "Unknown flow error")
                        }
                        historyRepository.updateMessageThinkingState(messageId, isThinking = false, thinkingTime = null)
                        return@onCompletion
                    }

                    if (!receivedAnyData && streamError == null) {
                        streamError = DomainError.Generic("Stream completed without emitting any data.")
                    }

                    // –ö–∞–ª–∏–±—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    actualPromptTokens?.let { actual ->
                        if (estimatedTokens > 0) {
                            tokenEstimator.adjustTokenRatio(actual, estimatedTokens)
                            Log.d("TokenCalibration", "Estimated: $estimatedTokens, Actual: $actual, New Ratio: ${tokenEstimator.getCurrentRatio()}")
                        }
                    }

                    historyRepository.updateMessageThinkingState(messageId, isThinking = false, thinkingTime = thinkingTime)
                }
                .collect { result ->
                    when (result) {
                        is DataResult.Success -> {
                            when (val chunk = result.data) {
                                is StreamChunk.Content -> {
                                    historyRepository.appendContentToMessage(messageId, chunk.text)
                                    receivedAnyData = true
                                }
                                is StreamChunk.Usage -> {
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                                    actualPromptTokens = chunk.promptTokens
                                    Log.d("TokenUsage", "Prompt: ${chunk.promptTokens}, Completion: ${chunk.completionTokens}")
                                }
                            }
                        }
                        is DataResult.Error -> {
                            val exception = result.exception
                            streamError = when (exception) {
                                is DomainError -> exception
                                null -> DomainError.Generic("Stream returned an error with no exception details")
                                else -> DomainError.Generic(
                                    exception.localizedMessage ?: "Unknown stream error"
                                )
                            }
                        }
                        DataResult.Loading -> { }
                    }
                }

            streamError?.let { throw it }
        } catch (e: Exception) {
            historyRepository.updateMessageThinkingState(messageId, isThinking = false, thinkingTime = null)
            throw e
        }
    }

}
